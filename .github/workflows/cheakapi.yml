name: Check API Updates

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'  # 每5分钟运行一次

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PUSH_TOKEN }}

      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: 获取API数据并更新JSON
        run: |
          current_time=$(date -Is)
          month_ago=$(date -Is -d "1 month ago")
          
          # 获取API数据并验证
          response=$(curl -s "https://blogapi.pysio.online/check")
          
          echo "API Response:"
          echo "$response"
          
          # 检查JSON文件是否存在
          if [ ! -f "cheak.json" ]; then
            echo "[]" > cheak.json
          fi
          
          # 读取现有数据
          existing_data=$(cat cheak.json)
          
          # 处理新数据（使用echo -n避免额外的换行）
          new_entry_compare=$(echo -n "$response" | jq 'del(.last_heartbeat)')
          
          # 检查是否存在记录
          if [ "$(echo "$existing_data" | jq 'length')" -eq 0; then
            # 第一条记录
            updated_data=$(echo -n "$response" | jq -R . | jq --arg time "$current_time" \
              '[{start_time: $time, end_time: null, data: (input | fromjson)}]')
          else
            last_entry=$(echo "$existing_data" | jq '.[-1]')
            last_entry_compare=$(echo "$last_entry" | jq '.data | del(.last_heartbeat)')
            
            # 比较数据（排除last_heartbeat）
            if [ "$(echo "$new_entry_compare" | jq -c '.')" = "$(echo "$last_entry_compare" | jq -c '.')" ]; then
              # 数据相同，更新最后一条记录的 end_time
              updated_data=$(echo "$existing_data" | jq --arg time "$current_time" \
                '[.[0:-1], (.[-1] | .end_time = $time)] | flatten')
            else
              # 数据有变化，添加新记录
              updated_data=$(echo "$existing_data" | jq --arg time "$current_time" \
                --arg response "$response" \
                '[.[0:-1], (.[-1] | .end_time = $time), {start_time: $time, end_time: null, data: ($response | fromjson)}] | flatten')
            fi
          fi
          
          # 只保留最近一个月的数据并写入文件
          echo "$updated_data" | jq --arg month_ago "$month_ago" \
            '[.[] | select(.start_time >= $month_ago)]' > cheak.json

      - name: 配置 Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: 提交更改
        run: |
          git add cheak.json
          if git diff --cached --quiet; then
            echo "没有检测到更改，跳过提交。"
          else
            git commit -m "自动更新 API 检查数据"
            git push origin HEAD:main
          fi